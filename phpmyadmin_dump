#!/usr/bin/env python3
import argparse
import re
import sys
from pathlib import Path
from urllib.parse import urljoin, quote

import requests
from lxml import html


HTTP_HEADERS = {
	'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
	'Accept-Encoding': 'gzip, deflate',
	'Accept-Language': 'en-US,en;q=0.9',
	'Cache-Control': 'no-cache',
	'Connection': 'keep-alive',
	'Pragma': 'no-cache',
	'Upgrade-Insecure-Requests': '1',
}


class DumpError(RuntimeError):
	pass


def is_login_successful(doc):
	return len(doc.xpath('//form[@name="login_form"]')) == 0


def main():
	parser = argparse.ArgumentParser(description="This is a simple script to dump a database from phpmyadmin")
	parser.add_argument('url', help="The url of the phpmyadmin page")
	parser.add_argument('username', help="The username of the database")
	parser.add_argument('password', help="The password of the database")
	parser.add_argument('--timeout', default=60, type=int, help="Request timeout")
	parser.add_argument('--databases', nargs='*', help="List of databases to dump")
	parser.add_argument('--output_dir', help="Output directory")
	parser.add_argument('--output', help="Output file for single database")

	args = parser.parse_args()

	if args.output is not None:
		if args.output_dir is not None:
			raise DumpError("Cannot specify both --output and --output_dir")
		if len(args.databases) > 1:
			raise DumpError("Cannot specify --output for multiple databases")
		if len(args.databases) == 0:
			raise DumpError("Cannot specify --output without specifying databases")

	session = requests.Session()

	response = session.get(
		args.url,
		headers=HTTP_HEADERS,
		verify=False,
		timeout=args.timeout
	)
	response.raise_for_status()
	doc = html.fromstring(response.content)
	login_form = doc.xpath('//form[@name="login_form"]')[0]
	form_data = {
		'pma_username': args.username,
		'pma_password': args.password,
	}
	for form_input in login_form.xpath('.//input'):
		if form_input.get('name') is not None and form_input.get('value') is not None:
			form_data.setdefault(form_input.get('name'), form_input.get('value'))
	token = form_data['token']

	response = session.post(
		args.url,
		headers=HTTP_HEADERS,
		data=form_data,
		verify=False,
		timeout=args.timeout
	)
	response.raise_for_status()
	doc = html.fromstring(response.content)

	if not is_login_successful(doc):
		raise DumpError("Bad username or password")

	export_url = urljoin(args.url, 'server_export.php')
	export_kwargs = {
		'db': '',
		'token': token,
	}
	export_url += '?' + '&'.join(f'{k}={quote(v, safe="")}' for k, v in export_kwargs.items())

	response = session.get(
		export_url,
		headers=HTTP_HEADERS,
		verify=False,
		timeout=args.timeout
	)
	response.raise_for_status()
	doc = html.fromstring(response.content)

	export_form = doc.xpath('//form[@name="dump"]')[0]
	databases = []
	form_input = export_form.xpath('.//select[@name="db_select[]"]')[0]
	for db in form_input.xpath('.//option'):
		databases.append(db.get('value'))

	if args.databases:
		databases = args.databases

	for database in databases:
		export_database(session, args, database, token)


def save_unique_file(response, output_dir, filename):
	# Sanitize filename
	filename = filename.replace('\\', '/').split('/')[-1]
	filename = filename.lstrip('.')
	filename = re.sub(r'[<>:"/\\|?*\x00-\x1F]', '_', filename)

	# Use default name if empty after sanitizing
	if not filename:
		filename = 'dump.sql'

	name_part = Path(filename).stem or 'dump'
	ext_part = Path(filename).suffix

	# Create candidate path
	candidate = (output_dir / (name_part + ext_part)).resolve()

	# Ensure it stays within output_dir
	if output_dir not in candidate.parents and candidate != output_dir:
		name_part = 'dump'
		candidate = (output_dir / (name_part + ext_part)).resolve()

	# If file exists or still unsafe, find a unique one
	counter = 1
	while candidate.exists() or output_dir not in candidate.parents:
		candidate = output_dir / f"{name_part}_{counter}{ext_part}"
		candidate = candidate.resolve()
		counter += 1

	# Save the file
	with open(candidate, 'wb') as f:
		for chunk in response.iter_content(chunk_size=8192):
			f.write(chunk)

	return candidate  # Optional: return the final saved path


def save_file(response, filename):
	path = Path(filename)
	path.parent.mkdir(parents=True, exist_ok=True)
	with open(path, 'wb') as f:
		for chunk in response.iter_content(chunk_size=8192):
			f.write(chunk)


def export_database(session, args, database, token):
	export_url = urljoin(args.url, 'db_export.php')
	export_kwargs = {
		'db': database,
		'token': token,
	}
	export_url += '?' + '&'.join(f'{k}={quote(v, safe="")}' for k, v in export_kwargs.items())
	response = session.get(
		export_url,
		headers=HTTP_HEADERS,
		verify=False,
		timeout=args.timeout
	)
	response.raise_for_status()
	doc = html.fromstring(response.content)

	export_form = doc.xpath('//form[@name="dump"]')[0]
	form_data = {}
	for form_input in export_form.xpath('.//input'):
		field_name = form_input.get('name')
		if field_name is not None and form_input.get('value') is not None:
			if form_input.get('name').startswith('aliases['):
				continue
			form_type = form_input.get('type')
			if form_type == 'radio' and form_input.get('checked') is None:
				continue
			if form_type == 'checkbox' and form_input.get('checked') is None:
				continue
			if field_name in form_data:
				if not isinstance(form_data[field_name], list):
					form_data[field_name] = [form_data[field_name]]
				form_data[field_name].append(form_input.get('value'))
			else:
				form_data[field_name] = form_input.get('value')
	for form_input in export_form.xpath('.//select'):
		field_name = form_input.get('name')
		if form_input.get('name') is not None:
			for option in form_input.xpath('.//option'):
				if option.get('selected') is not None:
					if field_name in form_data:
						if not isinstance(form_data[field_name], list):
							form_data[field_name] = [form_data[field_name]]
						form_data[field_name].append(option.get('value'))
					else:
						form_data[field_name] = option.get('value')

	export_url = urljoin(args.url, 'export.php')
	response = session.post(
		export_url,
		headers=HTTP_HEADERS,
		data=form_data,
		verify=False,
		stream=True,
	)
	response.raise_for_status()

	content_disposition = response.headers.get('Content-Disposition', '')
	if not content_disposition:
		raise DumpError("Database dump failed")

	if args.output is None:
		filename = re.search(r'filename="(.*)"', content_disposition).group(1)

		output_dir = Path(args.output_dir or '.').resolve()
		output_dir.mkdir(parents=True, exist_ok=True)
		save_unique_file(response, output_dir, filename)
	else:
		save_file(response, args.output)


if __name__ == "__main__":
	try:
		main()
	except DumpError as e:
		sys.stderr.write(str(e) + '\n')
		sys.exit(1)
